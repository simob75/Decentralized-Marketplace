pragma solidity ^0.4.24;

contract EcommerceStore {
    
    enum ProductCondition {New, Used}
    
    uint public productIndex;
    
    mapping (address => mapping(uint => Product)) stores;
    mapping (uint => address) productIdInStore;
    
    struct Product {
        uint id;
        string name;
        string category;
        string imageLink;
        string descLink;
        uint starTime;
        uint price; //it will be set in wei
        ProductCondition condition;
        address buyer;
    }
    
    constructor() public {
        productIndex = 0;
    }
    
    function addProductToStore(string _name, string _category, string _imageLink, 
    string _descLink, uint _starTime, uint _condition, uint _price) public {
        productIndex += 1;
        Product memory product = Product(productIndex, _name, _category, _imageLink, _descLink, _starTime, 
                                        _price, ProductCondition(_condition), 0);
        stores[msg.sender][productIndex] = product;
        productIdInStore[productIndex] = msg.sender;
     
    }
    
    function getProduct(uint _productIndex) public view returns(uint, string, string, string, string, uint, uint,
    ProductCondition, address) {
        //productIdInStore[_productIndex];
        //(address => mapping(uint => Product));
        Product memory product = stores[productIdInStore[_productIndex]][_productIndex];
        return (product.id, product.name, product.category, product.imageLink, product.descLink, product.starTime,
                product.price, product.condition, product.buyer);
    }
    
    
    
    
}
